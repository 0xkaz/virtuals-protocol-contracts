{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x652BF29626356b7FaDc2B5205d4F81be9743da1c",
      "txHash": "0x07bcde4816eca00eb802824f3fc880190109c9d3ea953409107885bf5790372a",
      "kind": "transparent"
    },
    {
      "address": "0x50725af160260a316b2673C71C8c21469f6732c0",
      "txHash": "0x8a35723272ef2fa9c59e2ad296a837d42a4a703bfa3907895b05a81302aab8f5",
      "kind": "transparent"
    },
    {
      "address": "0xBF8C24CAFa62Bdd5f5cB9773Ac64f5D489dF44C5",
      "txHash": "0xf0cb4ada1d78362ba031f9f541f1b4f053f8f77b2ecb974b8ee7f44b086cba6a",
      "kind": "transparent"
    },
    {
      "address": "0x8871C219257b0F17A9A20f3c09626161B1a0674B",
      "txHash": "0x655b65ba07d1c301e822643426934d97643bb4f5b54f28c39b77a7fd4ad21305",
      "kind": "transparent"
    },
    {
      "address": "0x94Bf9622348Cf5598D9A491Fa809194Cf85A0D61",
      "txHash": "0x1c0c4305b58b1660bd5f13559e828cfe6dc1f538f01465bea5736763fd537c87",
      "kind": "transparent"
    },
    {
      "address": "0xf1942A9b1B0037A20350358c9FE9FFd96821c685",
      "txHash": "0x8b3b9d7eb03ea8e41986244d8beb1c251272dc879c2189f3cc78c146f64b8272",
      "kind": "transparent"
    }
  ],
  "impls": {
    "5a718e3cb289ae3a2cdde94e4ef6a54f7b17a1e2e4ee8415d3adaa9387448fd7": {
      "address": "0x2fb74722D53Dac5290515c477950f4292dA06ccf",
      "txHash": "0xcb09e66e04a585d9091fc418887e56dcdd8366dad2b2bee6997b2ffce856f604",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "coreTypes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint8,t_string_storage)",
            "contract": "CoreRegistry",
            "src": "contracts/virtualPersona/CoreRegistry.sol:7"
          },
          {
            "label": "_nextCoreType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8",
            "contract": "CoreRegistry",
            "src": "contracts/virtualPersona/CoreRegistry.sol:8"
          },
          {
            "label": "_validatorsMap",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:8"
          },
          {
            "label": "_baseValidatorScore",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:10"
          },
          {
            "label": "_validators",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:12"
          },
          {
            "label": "_getScoreOf",
            "offset": 0,
            "slot": "5",
            "type": "t_function_internal_view(t_uint256,t_address)returns(t_uint256)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:14"
          },
          {
            "label": "_getMaxScore",
            "offset": 8,
            "slot": "5",
            "type": "t_function_internal_view(t_uint256)returns(t_uint256)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:15"
          },
          {
            "label": "_getPastScore",
            "offset": 16,
            "slot": "5",
            "type": "t_function_internal_view(t_uint256,t_address,t_uint256)returns(t_uint256)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:16"
          },
          {
            "label": "_nextVirtualId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:27"
          },
          {
            "label": "_stakingTokenToVirtualId",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:28"
          },
          {
            "label": "virtualInfos",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(VirtualInfo)11161_storage)",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:47"
          },
          {
            "label": "_contributionNft",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:49"
          },
          {
            "label": "_serviceNft",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC721Storage)191_storage": {
            "label": "struct ERC721Upgradeable.ERC721Storage",
            "members": [
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(ERC721URIStorageStorage)329_storage": {
            "label": "struct ERC721URIStorageUpgradeable.ERC721URIStorageStorage",
            "members": [
              {
                "label": "_tokenURIs",
                "type": "t_mapping(t_uint256,t_string_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(InitializableStorage)93_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint8)dyn_storage": {
            "label": "uint8[]",
            "numberOfBytes": "32"
          },
          "t_function_internal_view(t_uint256)returns(t_uint256)": {
            "label": "function (uint256) view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_function_internal_view(t_uint256,t_address)returns(t_uint256)": {
            "label": "function (uint256,address) view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_function_internal_view(t_uint256,t_address,t_uint256)returns(t_uint256)": {
            "label": "function (uint256,address,uint256) view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(VirtualInfo)11161_storage)": {
            "label": "mapping(uint256 => struct IAgentNft.VirtualInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_string_storage)": {
            "label": "mapping(uint8 => string)",
            "numberOfBytes": "32"
          },
          "t_struct(VirtualInfo)11161_storage": {
            "label": "struct IAgentNft.VirtualInfo",
            "members": [
              {
                "label": "dao",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "founder",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "tba",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "coreTypes",
                "type": "t_array(t_uint8)dyn_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
              "offset": 0,
              "slot": "4"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
              "offset": 0,
              "slot": "5"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "3f4b61e092a5b9bf4326e0268f29c6c2d3494e120a5c408d969495392e99f39c": {
      "address": "0xdE8299ba9a20f6aca7516735FcAe3E04F8ba417b",
      "txHash": "0xae8fc06654220bda19d054e3eb2529e11eeae8ea015fe200ffa23d166cfc8723",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "coreTypes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint8,t_string_storage)",
            "contract": "CoreRegistry",
            "src": "contracts/virtualPersona/CoreRegistry.sol:7"
          },
          {
            "label": "_nextCoreType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8",
            "contract": "CoreRegistry",
            "src": "contracts/virtualPersona/CoreRegistry.sol:8"
          },
          {
            "label": "_validatorsMap",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:8"
          },
          {
            "label": "_baseValidatorScore",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:10"
          },
          {
            "label": "_validators",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:12"
          },
          {
            "label": "_getScoreOf",
            "offset": 0,
            "slot": "5",
            "type": "t_function_internal_view(t_uint256,t_address)returns(t_uint256)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:14"
          },
          {
            "label": "_getMaxScore",
            "offset": 8,
            "slot": "5",
            "type": "t_function_internal_view(t_uint256)returns(t_uint256)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:15"
          },
          {
            "label": "_getPastScore",
            "offset": 16,
            "slot": "5",
            "type": "t_function_internal_view(t_uint256,t_address,t_uint256)returns(t_uint256)",
            "contract": "ValidatorRegistry",
            "src": "contracts/virtualPersona/ValidatorRegistry.sol:16"
          },
          {
            "label": "_nextVirtualId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:27"
          },
          {
            "label": "_stakingTokenToVirtualId",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:28"
          },
          {
            "label": "virtualInfos",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(VirtualInfo)11161_storage)",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:47"
          },
          {
            "label": "_contributionNft",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:49"
          },
          {
            "label": "_serviceNft",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "AgentNft",
            "src": "contracts/virtualPersona/AgentNft.sol:50"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC721Storage)191_storage": {
            "label": "struct ERC721Upgradeable.ERC721Storage",
            "members": [
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(ERC721URIStorageStorage)329_storage": {
            "label": "struct ERC721URIStorageUpgradeable.ERC721URIStorageStorage",
            "members": [
              {
                "label": "_tokenURIs",
                "type": "t_mapping(t_uint256,t_string_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(InitializableStorage)93_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint8)dyn_storage": {
            "label": "uint8[]",
            "numberOfBytes": "32"
          },
          "t_function_internal_view(t_uint256)returns(t_uint256)": {
            "label": "function (uint256) view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_function_internal_view(t_uint256,t_address)returns(t_uint256)": {
            "label": "function (uint256,address) view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_function_internal_view(t_uint256,t_address,t_uint256)returns(t_uint256)": {
            "label": "function (uint256,address,uint256) view returns (uint256)",
            "numberOfBytes": "8"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(VirtualInfo)11161_storage)": {
            "label": "mapping(uint256 => struct IAgentNft.VirtualInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_string_storage)": {
            "label": "mapping(uint8 => string)",
            "numberOfBytes": "32"
          },
          "t_struct(VirtualInfo)11161_storage": {
            "label": "struct IAgentNft.VirtualInfo",
            "members": [
              {
                "label": "dao",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "founder",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "tba",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "coreTypes",
                "type": "t_array(t_uint8)dyn_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
              "offset": 0,
              "slot": "4"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
              "offset": 0,
              "slot": "5"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "f409413478aa377db6e879e6edf72c7e4836dc112f3ce20922ec03123370037e": {
      "address": "0x068f5E31D259D4807C66BB647059186a43A1A0D6",
      "txHash": "0xa0df4d89fdf91b2176cb82db5337d74de619a98076607cf0aed02080da357674",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "personaNft",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:22"
          },
          {
            "label": "_contributionVirtualId",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:24"
          },
          {
            "label": "_parents",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:25"
          },
          {
            "label": "_children",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:26"
          },
          {
            "label": "_cores",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint8)",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:27"
          },
          {
            "label": "modelContributions",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:29"
          },
          {
            "label": "modelDatasets",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:30"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "7",
            "type": "t_address",
            "contract": "ContributionNft",
            "src": "contracts/contribution/ContributionNft.sol:39"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC721EnumerableStorage)307_storage": {
            "label": "struct ERC721EnumerableUpgradeable.ERC721EnumerableStorage",
            "members": [
              {
                "label": "_ownedTokens",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_ownedTokensIndex",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_allTokens",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_allTokensIndex",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC721Storage)162_storage": {
            "label": "struct ERC721Upgradeable.ERC721Storage",
            "members": [
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(ERC721URIStorageStorage)384_storage": {
            "label": "struct ERC721URIStorageUpgradeable.ERC721URIStorageStorage",
            "members": [
              {
                "label": "_tokenURIs",
                "type": "t_mapping(t_uint256,t_string_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(InitializableStorage)64_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
              "offset": 0,
              "slot": "4"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
              "offset": 0,
              "slot": "5"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "e47b694341c08d137cda2fff249767490e4b9f4c3d95c3c04cd0a5171d5e0c08": {
      "address": "0x9cE798EC2A95eDde3F1C2db603c38369bF1308A4",
      "txHash": "0x86e2848a99801cfeff85f38d0815988510547c0fcaefe980494fad103604416d",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_nextTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:25"
          },
          {
            "label": "personaNft",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:27"
          },
          {
            "label": "contributionNft",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:28"
          },
          {
            "label": "datasetImpactWeight",
            "offset": 20,
            "slot": "2",
            "type": "t_uint16",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:30"
          },
          {
            "label": "_cores",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint8)",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:32"
          },
          {
            "label": "_maturities",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:33"
          },
          {
            "label": "_impacts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:34"
          },
          {
            "label": "_mintedAts",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:35"
          },
          {
            "label": "_coreServices",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:37"
          },
          {
            "label": "_coreDatasets",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_mapping(t_uint8,t_array(t_uint256)dyn_storage))",
            "contract": "ServiceNft",
            "src": "contracts/contribution/ServiceNft.sol:39"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC721EnumerableStorage)307_storage": {
            "label": "struct ERC721EnumerableUpgradeable.ERC721EnumerableStorage",
            "members": [
              {
                "label": "_ownedTokens",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_ownedTokensIndex",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_allTokens",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_allTokensIndex",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC721Storage)162_storage": {
            "label": "struct ERC721Upgradeable.ERC721Storage",
            "members": [
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(ERC721URIStorageStorage)384_storage": {
            "label": "struct ERC721URIStorageUpgradeable.ERC721URIStorageStorage",
            "members": [
              {
                "label": "_tokenURIs",
                "type": "t_mapping(t_uint256,t_string_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(InitializableStorage)64_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)14_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_mapping(t_uint256,t_mapping(t_uint8,t_array(t_uint256)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint8 => uint256[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint8 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint8)": {
            "label": "mapping(uint256 => uint8)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint8 => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_uint256)": {
            "label": "mapping(uint8 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
              "offset": 0,
              "slot": "4"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
              "offset": 0,
              "slot": "5"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "2121aac3901589319423e61e48c38ca0ee66f8bd6046e65c56a2afb856b3a944": {
      "address": "0x854a94f8F2709106AB41c8f876e37E442C7424C0",
      "txHash": "0x9a9c7ff6d3f80c0b7994ab2e196199adcc20e9519fe5ad9d1ee07ace6cd63dbb",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)275_storage)",
            "contract": "AccessControl",
            "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
          },
          {
            "label": "_nextId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:20"
          },
          {
            "label": "tokenImplementation",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:21"
          },
          {
            "label": "daoImplementation",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:22"
          },
          {
            "label": "nft",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:23"
          },
          {
            "label": "tbaRegistry",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:24"
          },
          {
            "label": "applicationThreshold",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:25"
          },
          {
            "label": "allTokens",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:27"
          },
          {
            "label": "allDAOs",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address)dyn_storage",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:28"
          },
          {
            "label": "assetToken",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:30"
          },
          {
            "label": "maturityDuration",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:31"
          },
          {
            "label": "_applications",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(Application)2278_storage)",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:65"
          },
          {
            "label": "gov",
            "offset": 0,
            "slot": "12",
            "type": "t_address",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:67"
          },
          {
            "label": "_vault",
            "offset": 0,
            "slot": "13",
            "type": "t_address",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:78"
          },
          {
            "label": "locked",
            "offset": 20,
            "slot": "13",
            "type": "t_bool",
            "contract": "AgentFactory",
            "src": "contracts/virtualPersona/AgentFactory.sol:80"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)10_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint8)dyn_storage": {
            "label": "uint8[]",
            "numberOfBytes": "32"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(ApplicationStatus)2249": {
            "label": "enum AgentFactory.ApplicationStatus",
            "members": [
              "Active",
              "Executed",
              "Withdrawn"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)275_storage)": {
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Application)2278_storage)": {
            "label": "mapping(uint256 => struct AgentFactory.Application)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Application)2278_storage": {
            "label": "struct AgentFactory.Application",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "tokenURI",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "status",
                "type": "t_enum(ApplicationStatus)2249",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "withdrawableAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "proposer",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "cores",
                "type": "t_array(t_uint8)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "proposalEndBlock",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "virtualId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "tbaSalt",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "tbaImplementation",
                "type": "t_address",
                "offset": 0,
                "slot": "10"
              },
              {
                "label": "daoVotingPeriod",
                "type": "t_uint32",
                "offset": 20,
                "slot": "10"
              },
              {
                "label": "daoThreshold",
                "type": "t_uint256",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)275_storage": {
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "80a3d37aa4c300fa83267d9bcbcf5f649916f1d164eee58ebfb862b1fa5b4a28": {
      "address": "0x8867EaE1b003A6BDA5dFEaeD80A903a74B109ee0",
      "txHash": "0x326b1fdff366808f7c69f48c081aa5cec1a499f4b00dc89b70e0f0139f51060f",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)275_storage)",
            "contract": "AccessControl",
            "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
          },
          {
            "label": "_nextRewardId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:24"
          },
          {
            "label": "rewardToken",
            "offset": 6,
            "slot": "1",
            "type": "t_address",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:30"
          },
          {
            "label": "agentNft",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:31"
          },
          {
            "label": "contributionNft",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:32"
          },
          {
            "label": "serviceNft",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:33"
          },
          {
            "label": "_mainRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(MainReward)8260_storage)dyn_storage",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:36"
          },
          {
            "label": "_rewards",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_array(t_struct(Reward)8273_storage)dyn_storage)",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:37"
          },
          {
            "label": "_rewardSettings",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Trace)8925_storage",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:39"
          },
          {
            "label": "protocolRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:42"
          },
          {
            "label": "validatorPoolRewards",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:43"
          },
          {
            "label": "_claimedStakerRewards",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)8278_storage))",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:44"
          },
          {
            "label": "_claimedValidatorRewards",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)8278_storage))",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:46"
          },
          {
            "label": "_serviceRewards",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(ServiceReward)8289_storage)",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:48"
          },
          {
            "label": "_rewardImpacts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint48,t_mapping(t_uint8,t_uint256))",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:49"
          },
          {
            "label": "_validatorRewards",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_mapping(t_uint48,t_uint256))",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:51"
          },
          {
            "label": "locked",
            "offset": 0,
            "slot": "15",
            "type": "t_bool",
            "contract": "AgentReward",
            "src": "contracts/AgentReward.sol:61"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)10_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Checkpoint)8942_storage)dyn_storage": {
            "label": "struct RewardSettingsCheckpoints.Checkpoint[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(MainReward)8260_storage)dyn_storage": {
            "label": "struct IAgentReward.MainReward[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Reward)8273_storage)dyn_storage": {
            "label": "struct IAgentReward.Reward[]",
            "numberOfBytes": "32"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)8278_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IAgentReward.Claim))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint48,t_uint256))": {
            "label": "mapping(address => mapping(uint48 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)275_storage)": {
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_struct(Reward)8273_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct IAgentReward.Reward[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Claim)8278_storage)": {
            "label": "mapping(uint256 => struct IAgentReward.Claim)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ServiceReward)8289_storage)": {
            "label": "mapping(uint256 => struct IAgentReward.ServiceReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint48,t_mapping(t_uint8,t_uint256))": {
            "label": "mapping(uint48 => mapping(uint8 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint48,t_uint256)": {
            "label": "mapping(uint48 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_uint256)": {
            "label": "mapping(uint8 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Checkpoint)8942_storage": {
            "label": "struct RewardSettingsCheckpoints.Checkpoint",
            "members": [
              {
                "label": "_key",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_value",
                "type": "t_struct(RewardSettings)8936_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Claim)8278_storage": {
            "label": "struct IAgentReward.Claim",
            "members": [
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rewardCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(MainReward)8260_storage": {
            "label": "struct IAgentReward.MainReward",
            "members": [
              {
                "label": "blockNumber",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "agentCount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Reward)8273_storage": {
            "label": "struct IAgentReward.Reward",
            "members": [
              {
                "label": "id",
                "type": "t_uint48",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "mainIndex",
                "type": "t_uint32",
                "offset": 6,
                "slot": "0"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "validatorAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "contributorAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "coreAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(RewardSettings)8936_storage": {
            "label": "struct RewardSettingsCheckpoints.RewardSettings",
            "members": [
              {
                "label": "protocolShares",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "contributorShares",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "stakerShares",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "parentShares",
                "type": "t_uint16",
                "offset": 6,
                "slot": "0"
              },
              {
                "label": "stakeThreshold",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)275_storage": {
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ServiceReward)8289_storage": {
            "label": "struct IAgentReward.ServiceReward",
            "members": [
              {
                "label": "impact",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "parentAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "totalClaimedParent",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(Trace)8925_storage": {
            "label": "struct RewardSettingsCheckpoints.Trace",
            "members": [
              {
                "label": "_checkpoints",
                "type": "t_array(t_struct(Checkpoint)8942_storage)dyn_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "16ae1d76b375e323cf99563c3f8cd9badf02553eb5b5e610ed0b42d5628640f7": {
      "address": "0x634D91f7A67011A60985dF555A5157f9b321f7dE",
      "txHash": "0x926ffce5d7bb5a671409efb22b415e4646e2bbe189ad895331bbcf0e2870a34c",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)275_storage)",
            "contract": "AccessControl",
            "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
          },
          {
            "label": "_nextRewardId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:29"
          },
          {
            "label": "rewardToken",
            "offset": 6,
            "slot": "1",
            "type": "t_address",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:35"
          },
          {
            "label": "agentNft",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:36"
          },
          {
            "label": "contributionNft",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:37"
          },
          {
            "label": "serviceNft",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:38"
          },
          {
            "label": "_mainRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(MainReward)6343_storage)dyn_storage",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:41"
          },
          {
            "label": "_rewards",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_array(t_struct(Reward)6356_storage)dyn_storage)",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:42"
          },
          {
            "label": "_rewardSettings",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Trace)6640_storage",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:44"
          },
          {
            "label": "protocolRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:47"
          },
          {
            "label": "validatorPoolRewards",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:48"
          },
          {
            "label": "_claimedStakerRewards",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)6361_storage))",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:49"
          },
          {
            "label": "_claimedValidatorRewards",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)6361_storage))",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:51"
          },
          {
            "label": "_serviceRewards",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(ServiceReward)6372_storage)",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:53"
          },
          {
            "label": "_rewardImpacts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint48,t_mapping(t_uint8,t_uint256))",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:54"
          },
          {
            "label": "_validatorRewards",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_mapping(t_uint48,t_uint256))",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:56"
          },
          {
            "label": "locked",
            "offset": 0,
            "slot": "15",
            "type": "t_bool",
            "contract": "AgentRewardV2",
            "src": "contracts/AgentRewardV2.sol:66"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)10_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Checkpoint)6657_storage)dyn_storage": {
            "label": "struct RewardSettingsCheckpoints.Checkpoint[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(MainReward)6343_storage)dyn_storage": {
            "label": "struct IAgentReward.MainReward[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Reward)6356_storage)dyn_storage": {
            "label": "struct IAgentReward.Reward[]",
            "numberOfBytes": "32"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)6361_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IAgentReward.Claim))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint48,t_uint256))": {
            "label": "mapping(address => mapping(uint48 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)275_storage)": {
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_struct(Reward)6356_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct IAgentReward.Reward[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Claim)6361_storage)": {
            "label": "mapping(uint256 => struct IAgentReward.Claim)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ServiceReward)6372_storage)": {
            "label": "mapping(uint256 => struct IAgentReward.ServiceReward)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint48,t_mapping(t_uint8,t_uint256))": {
            "label": "mapping(uint48 => mapping(uint8 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint48,t_uint256)": {
            "label": "mapping(uint48 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_uint256)": {
            "label": "mapping(uint8 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Checkpoint)6657_storage": {
            "label": "struct RewardSettingsCheckpoints.Checkpoint",
            "members": [
              {
                "label": "_key",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_value",
                "type": "t_struct(RewardSettings)6651_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Claim)6361_storage": {
            "label": "struct IAgentReward.Claim",
            "members": [
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rewardCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(MainReward)6343_storage": {
            "label": "struct IAgentReward.MainReward",
            "members": [
              {
                "label": "blockNumber",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "agentCount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Reward)6356_storage": {
            "label": "struct IAgentReward.Reward",
            "members": [
              {
                "label": "id",
                "type": "t_uint48",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "mainIndex",
                "type": "t_uint32",
                "offset": 6,
                "slot": "0"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "validatorAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "contributorAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "coreAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(RewardSettings)6651_storage": {
            "label": "struct RewardSettingsCheckpoints.RewardSettings",
            "members": [
              {
                "label": "protocolShares",
                "type": "t_uint16",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "contributorShares",
                "type": "t_uint16",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "stakerShares",
                "type": "t_uint16",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "parentShares",
                "type": "t_uint16",
                "offset": 6,
                "slot": "0"
              },
              {
                "label": "stakeThreshold",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)275_storage": {
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ServiceReward)6372_storage": {
            "label": "struct IAgentReward.ServiceReward",
            "members": [
              {
                "label": "impact",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "parentAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalClaimed",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "totalClaimedParent",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(Trace)6640_storage": {
            "label": "struct RewardSettingsCheckpoints.Trace",
            "members": [
              {
                "label": "_checkpoints",
                "type": "t_array(t_struct(Checkpoint)6657_storage)dyn_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
